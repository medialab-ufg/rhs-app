{"version":3,"sources":["../../src/pages/posts/posts.module.ts","../../src/components/information/information.module.ts","../../src/components/information/information.ts","../../src/components/post-card/post-card.module.ts","../../src/components/post-card/post-card.ts","../../src/pages/posts/posts.ts"],"names":[],"mappings":"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","file":"4.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { PostsPage } from './posts';\n\nimport { InformationComponentModule } from './../../components/information/information.module';\nimport { PostsCardComponentModule } from './../../components/post-card/post-card.module';\n\n@NgModule({\n  declarations: [PostsPage],\n  imports: [IonicPageModule.forChild(PostsPage), PostsCardComponentModule, InformationComponentModule],\n})\nexport class PostsPageModule { }\n\n\n// WEBPACK FOOTER //\n// ./src/pages/posts/posts.module.ts","import { NgModule } from '@angular/core';\nimport { IonicModule } from 'ionic-angular';\n\nimport { InformationComponent } from './information';\n\n@NgModule({\n  declarations: [InformationComponent],\n  imports: [IonicModule],\n  exports: [InformationComponent]\n})\nexport class InformationComponentModule { }\n\n\n// WEBPACK FOOTER //\n// ./src/components/information/information.module.ts","import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'information',\n  templateUrl: 'information.html'\n})\nexport class InformationComponent {\n\n  @Input('message') message: string;\n  @Input('detail') detail: string;\n\n  constructor() {\n\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/information/information.ts","import { NgModule } from '@angular/core';\nimport { IonicModule } from 'ionic-angular';\n\nimport { PostCardComponent } from './../../components/post-card/post-card';\n\n@NgModule({\n  declarations: [PostCardComponent],\n  imports: [IonicModule],\n  exports: [PostCardComponent]\n})\nexport class PostsCardComponentModule { }\n\n\n// WEBPACK FOOTER //\n// ./src/components/post-card/post-card.module.ts","import { NavController } from 'ionic-angular';\nimport { Component, Input } from '@angular/core';\n\nimport { ApiProvider } from './../../providers/api/api';\n\n@Component({\n  selector: 'post-card',\n  templateUrl: 'post-card.html'\n})\nexport class PostCardComponent{\n\n  @Input('post-data') post: any;\n\n  constructor(public api: ApiProvider, public navCtrl: NavController ) {\n  }\n\n  goToAuthorPage(event, userId: number) {\n    event.stopPropagation(); // Avoids the click event to propagate to the card, and then go to post page.\n    if (userId == this.api.getUserId()) {\n      this.navCtrl.push('ProfilePage');\n    } else {\n      this.navCtrl.push('UserPage', { 'userId': userId });\n    }\n  }\n  \n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/post-card/post-card.ts","import { Component, ViewChild } from '@angular/core';\nimport { NavController, NavParams, IonicPage, Content, Platform } from 'ionic-angular';\nimport { FirebaseAnalytics } from '@ionic-native/firebase-analytics';\n\nimport { AuthenticationProvider } from './../../providers/authentication/authentication';\nimport { ApiProvider } from './../../providers/api/api';\nimport { UpdateProvider } from './../../providers/update/update';\n\n@IonicPage()\n@Component({\n  selector: 'page-posts',\n  templateUrl: 'posts.html',\n})\nexport class PostsPage {\n\n  @ViewChild(Content) list: Content;\n  \n  postsView = 'home';\n\n  // Results from API calls\n  homePostList: Array<any> = new Array<any>();\n  queuePostList: Array<any> = new Array<any>();\n  followingPostList: Array<any> = new Array<any>();\n\n  // Queris to be passed to API calls\n  homePostQueries: { [query: string]: String } = {};\n  queuePostQueries: { [query: string]: String } = {'status': 'voting-queue'}\n  followingPostQueries: { [query: string]: String } = {};\n\n  // Flags to controll infinite scroll calls\n  noMoreResultsOnHome: boolean = false;\n  noMoreResultsOnQueue: boolean = false;\n  noMoreResultsOnFollowing: boolean = false;\n\n  // Flag to controll loading spinner\n  showSpinnerOnHome = false;\n  showSpinnerOnQueue = false;\n  showSpinnerOnFollowing = false;\n  loadingFromRefresher = false;\n\n  isUserLogged: boolean = false;\n\n  unreadNotifications: number;\n\n  constructor(public navCtrl: NavController, \n              public navParams: NavParams,\n              public api: ApiProvider,\n              public authentication: AuthenticationProvider,\n              public update: UpdateProvider,\n              public platform: Platform,\n              public analytics: FirebaseAnalytics) {\n\n    this.isUserLogged = this.api.isLogged();\n    this.authentication.userLogged.subscribe(value => {\n      if (value === true) {\n        this.isUserLogged = this.api.isLogged();\n        if (this.postsView !== 'home') {\n          this.loadPosts(this.postsView, false);\n        }\n      }\n    });\n  }\n\n  ionViewDidLoad() {\n    \n    this.loadPosts(this.postsView, false);\n\n    // Uses update service to re-load after a time period without loading.\n    this.update.homePostsOutdated.subscribe(() => {\n      if (this.postsView === 'home') {\n        this.loadPosts(this.postsView, false);\n        this.getUnreadNotifications();\n      }\n    });\n    this.update.queuePostsOutdated.subscribe(() => {\n      if (this.postsView === 'queue') {\n        this.loadPosts(this.postsView, false);\n        this.getUnreadNotifications();\n      }\n    });\n    this.update.followingPostsOutdated.subscribe(() => {\n      if (this.postsView === 'following') {\n        this.loadPosts(this.postsView, false);\n        this.getUnreadNotifications();\n      }\n    });\n\n  }\n\n  ionViewWillEnter(){\n    this.getUnreadNotifications();\n\n    // Tells analytics that user accessed this screen.\n    this.analytics.setCurrentScreen(\"Posts \")\n    .then((res: any) => console.log(res))\n    .catch((error: any) => console.error(error));\n  }\n\n  getUnreadNotifications() {\n    this.api.getUnreadNotificationsNumber().subscribe(\n      response => this.unreadNotifications = response,\n      err => console.log('Error ' + err +  ' - On Getting Number of Unread Notifications.')\n    );\n  }\n\n  goToPostPage(id: number) {\n    this.navCtrl.push('PostPage', {'postId': id, 'returnFromPostFunction': this.returnFromPostPage });\n  }\n\n  goToSearchPage() {\n    this.navCtrl.push('SearchPage');\n  }\n\n  goToNotificationsPage() {\n    this.navCtrl.push('NotificationsPage');\n  }\n\n  changeSegment(postView: string) {\n    this.postsView = postView;\n    this.list.scrollToTop();\n    this.loadPosts(postView, null);\n  }\n\n  loadPosts(postView: string, isLoadingMore: boolean): Promise<any> {\n\n    this.postsView = postView;\n\n    return new Promise((resolve) => {\n\n      switch (this.postsView) {\n\n        case 'home':\n          this.showSpinnerOnHome = true;\n\n          // Informs the update service that this has been checked\n          this.update.checkedHomePosts(Date.now());\n\n          // Sets page query load more or refresh posts\n          //  Pull to refresh or update service calls.\n          if (isLoadingMore === false) {\n            this.homePostQueries['page'] = '1';\n          } \n          //  Infinite scroll calls\n          else if (isLoadingMore === true) {\n            this.showSpinnerOnHome = false;\n            this.homePostQueries['page'] = Number(this.homePostQueries['page']) + 1 + '';\n          } \n          //  Switching segment controller calls\n          else {\n            if (this.homePostList.length === 0) {\n              this.homePostQueries['page'] = '1';\n            } else {\n              this.showSpinnerOnHome = false;\n              break;\n            }\n          }\n          \n          // Perform the request to the api service\n          this.api.getPostList(this.api.isLogged(), this.homePostQueries).subscribe(\n            postList => {\n            if (isLoadingMore === false) {\n              this.homePostList = new Array<any>();\n            }\n            this.homePostList = this.homePostList.concat(postList);\n            this.noMoreResultsOnHome = false;     \n            console.log(this.homePostList);\n          },\n          err => {\n            if (err === 400) {\n              this.noMoreResultsOnHome = true;\n            }\n            console.log('Error ' + err +  ' - On User Data Request.');\n          },\n          () => { this.showSpinnerOnHome = false; this.loadingFromRefresher = false; resolve() });\n        break;\n\n        case 'queue':\n          if (this.api.isLogged()){\n            this.showSpinnerOnQueue = true;\n\n            // Informs the update service that this has been checked\n            this.update.checkedHomePosts(Date.now());\n\n            // Sets page query load more or refresh posts\n            //  Pull to refresh or update service calls.\n            if (isLoadingMore === false) {\n              this.queuePostQueries['page'] = '1';\n            } \n            //  Infinite scroll calls\n            else if (isLoadingMore === true) {\n              this.showSpinnerOnQueue = false;\n              this.queuePostQueries['page'] = Number(this.queuePostQueries['page']) + 1 + '';\n            } \n            //  Switching segment controller calls\n            else {\n              if (this.queuePostList.length === 0) {\n                this.queuePostQueries['page'] = '1';\n              } else {\n                this.showSpinnerOnQueue = false;\n                break;\n              }\n            }\n            // Perform the request to the api service\n            this.api.getPostList(true, this.queuePostQueries).subscribe(\n              postList => {\n              if (isLoadingMore === false) {\n                this.queuePostList = new Array<any>();\n              }\n              this.queuePostList = this.queuePostList.concat(postList);\n              console.log(this.queuePostList);\n              this.noMoreResultsOnQueue = false;\n            },\n            err => {\n              if (err === 400) {\n                this.noMoreResultsOnQueue = true;\n              }\n              console.log('Error ' + err +  ' - On User Data Request.');\n            },\n            () => { this.showSpinnerOnQueue = false; this.loadingFromRefresher = false; resolve() });\n          } else {\n            this.authentication.userLogged.subscribe(value => {\n              if (value === true) {\n                this.isUserLogged = this.api.isLogged();\n                this.loadPosts('queue', isLoadingMore);\n              }\n            });\n          }\n        break;\n        \n        case 'following':\n          if (this.api.isLogged()){\n            this.showSpinnerOnFollowing = true;\n\n            // Informs the update service that this has been checked\n            this.update.checkedFollowingPosts(Date.now());\n            \n            // Sets page query load more or refresh posts\n            //  Pull to refresh or update service calls.\n            if (isLoadingMore === false) {\n              this.followingPostQueries['page'] = '1';\n            } \n            //  Infinite scroll calls\n            else if (isLoadingMore === true) {\n              this.showSpinnerOnFollowing = false;\n              this.followingPostQueries['page'] = Number(this.followingPostQueries['page']) + 1 + '';\n            } \n            //  Switching segment controller calls\n            else {\n              if (this.followingPostList.length === 0) {\n                this.followingPostQueries['page'] = '1';\n              } else {\n                this.showSpinnerOnFollowing = false;\n                break;\n              }\n            }\n            // Adds array of following posts to query\n            if (this.api.followingUsers.length > 0) {\n              \n              this.followingPostQueries['author'] = String(this.api.followingUsers.join(','));\n\n              // Perform the request to the api service\n              this.api.getPostList(true, this.followingPostQueries).subscribe(\n                postList => {\n                if (isLoadingMore === false) {\n                  this.followingPostList = new Array<any>();\n                }\n                this.followingPostList = this.followingPostList.concat(postList);\n                this.noMoreResultsOnFollowing = false;\n              },\n              err => {\n                if (err === 400) {\n                  this.noMoreResultsOnFollowing = true;\n                }\n                console.log('Error ' + err +  ' - On User Data Request.');\n              },\n              () => { this.showSpinnerOnFollowing = false; this.loadingFromRefresher = false; resolve() });\n            } \n          } else {\n            this.authentication.userLogged.subscribe(value => {\n              if (value === true) {\n                this.isUserLogged = true;\n                this.loadPosts('queue', isLoadingMore);\n              }\n            });\n          }\n        break;\n      }\n\n    });\n \n  }\n\n  doRefresh(refresher) {\n    this.loadingFromRefresher = true;\n    this.loadPosts(this.postsView, false).then(() => refresher.complete());\n  }\n\n  doInfinite(): Promise<any> {\n    return new Promise((resolve) => {\n      this.loadPosts(this.postsView, true).then(() => resolve());\n    });\n  }\n\n  returnFromPostPage = (_params) => {\n    return new Promise((resolve, reject) => {\n      console.log(_params);\n\n      if (_params !== null) {\n        for(let post of this.homePostList) {\n          if (post['id'] == _params.id) {\n            post['comment_count'] = _params.commentCount;\n            post['total_votes'] = _params.totalVotes;\n          }\n        }\n        for(let post of this.queuePostList) {\n          if (post['id'] == _params.id) {\n            post['comment_count'] = _params.commentCount;\n            post['total_votes'] = _params.totalVotes;\n          }\n        }\n        for(let post of this.followingPostList) {\n          if (post['id'] == _params.id) {\n            post['comment_count'] = _params.commentCount;\n            post['total_votes'] = _params.totalVotes;\n          }\n        }\n      }\n      resolve();\n    });\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/posts/posts.ts"],"sourceRoot":""}